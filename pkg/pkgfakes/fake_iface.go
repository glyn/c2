// Code generated by counterfeiter. DO NOT EDIT.
package pkgfakes

import (
	sync "sync"

	pkg "github.com/glyn/c2/pkg"
)

type FakeIface struct {
	AMethodStub        func()
	aMethodMutex       sync.RWMutex
	aMethodArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIface) AMethod() {
	fake.aMethodMutex.Lock()
	fake.aMethodArgsForCall = append(fake.aMethodArgsForCall, struct {
	}{})
	fake.recordInvocation("AMethod", []interface{}{})
	fake.aMethodMutex.Unlock()
	if fake.AMethodStub != nil {
		fake.AMethodStub()
	}
}

func (fake *FakeIface) AMethodCallCount() int {
	fake.aMethodMutex.RLock()
	defer fake.aMethodMutex.RUnlock()
	return len(fake.aMethodArgsForCall)
}

func (fake *FakeIface) AMethodCalls(stub func()) {
	fake.aMethodMutex.Lock()
	defer fake.aMethodMutex.Unlock()
	fake.AMethodStub = stub
}

func (fake *FakeIface) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.aMethodMutex.RLock()
	defer fake.aMethodMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIface) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pkg.Iface = new(FakeIface)
